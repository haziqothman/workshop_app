rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User profiles
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false;
    }

    // Workshop owner data
    match /workshop_data/{workshopId} {
      allow read: if request.auth != null;
      allow create, update: if isWorkshopOwner() && request.resource.data.ownerId == request.auth.uid;
      allow delete: if isWorkshopOwner() && resource.data.ownerId == request.auth.uid;
    }

    // Foreman tasks
    match /foreman_tasks/{taskId} {
      allow read: if isForeman();
      allow create, update: if isForeman() && request.resource.data.assignedTo == request.auth.uid;
      allow delete: if false;
    }

    // Ratings system
    match /ratings/{ratingId} {
      allow read: if true;
      allow create: if isValidRating() && isNotRatingSelf();
      allow update, delete: if false;
    }

    // Helper functions
    function isWorkshopOwner() {
      return request.auth != null 
        && exists(/databases/$(database)/documents/users/$(request.auth.uid))
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "workshop_owner";
    }

    function isForeman() {
      return request.auth != null 
        && exists(/databases/$(database)/documents/users/$(request.auth.uid))
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "foreman";
    }

    function isValidRating() {
      return request.auth != null 
        && request.auth.uid == request.resource.data.fromUserId
        && request.resource.data.keys().hasAll(['fromUserId', 'toUserId', 'stars', 'comment', 'createdAt'])
        && request.resource.data.stars >= 1
        && request.resource.data.stars <= 5
        && (request.resource.data.createdAt is timestamp 
            || request.resource.data.createdAt == request.time);
    }

    function isNotRatingSelf() {
      return request.resource.data.fromUserId != request.resource.data.toUserId;
    }

    // Debug function (optional)
    function debugRating() {
      return debug(
        "User: " + request.auth.uid +
        "\nFromUserMatch: " + (request.auth.uid == request.resource.data.fromUserId) +
        "\nFieldsExist: " + request.resource.data.keys().hasAll(['fromUserId', 'toUserId', 'stars', 'createdAt']) +
        "\nStarsValid: " + (request.resource.data.stars >= 1 && request.resource.data.stars <= 5) +
        "\nNotSelf: " + (request.resource.data.fromUserId != request.resource.data.toUserId)
      );
    }
  }
}